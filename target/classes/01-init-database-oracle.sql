-- Oracle Database Initialization Script
-- Converted from PostgreSQL to Oracle

-- Create tables
CREATE TABLE SOCIAL_UD.LOCATION_TYPE
(
    LOCATION_TYPE_CODE        VARCHAR2(3)  NOT NULL PRIMARY KEY,
    LOCATION_TYPE_DESCRIPTION VARCHAR2(20) NOT NULL
);

CREATE TABLE SOCIAL_UD.LOCATION
(
    LOCATION_CODE      VARCHAR2(4)  NOT NULL PRIMARY KEY,
    LOCATION_TYPE_CODE VARCHAR2(3)  NOT NULL
        CONSTRAINT FK_LOCATION_TYPE REFERENCES SOCIAL_UD.LOCATION_TYPE,
    LOCATION_NAME      VARCHAR2(30) NOT NULL,
    PARENT_LOCATION    VARCHAR2(4)
        CONSTRAINT FK_LOCATION_ROOT REFERENCES SOCIAL_UD.LOCATION
);

CREATE TABLE SOCIAL_UD.PENDING_USER
(
    TOKEN            VARCHAR2(36) PRIMARY KEY,
    USER_ID          VARCHAR2(5),
    USER_NAME        VARCHAR2(25),
    USER_LAST_NAME   VARCHAR2(25),
    USER_UNIQUE_NAME VARCHAR2(6),
    EMAIL            VARCHAR2(50),
    PHONE            VARCHAR2(16),
    LOCATION_CODE    VARCHAR2(4),
    CREATED_AT       TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE SOCIAL_UD.SOCIAL_USER
(
    USER_ID           VARCHAR2(5)  NOT NULL PRIMARY KEY,
    USER_NAME         VARCHAR2(25) NOT NULL,
    USER_LAST_NAME    VARCHAR2(25) NOT NULL,
    USER_UNIQUE_NAME  VARCHAR2(6)  NOT NULL,
    USER_MODIFIER     VARCHAR2(5)  NULL
        CONSTRAINT FK_SOCIAL_USER_MODIFIER REFERENCES SOCIAL_UD.SOCIAL_USER (USER_ID),
    REGISTRATION_DATE TIMESTAMP   NOT NULL,
    EMAIL             VARCHAR2(50) NOT NULL,
    PHONE             VARCHAR2(16) NOT NULL,
    IMAGE             BLOB         NULL,
    THEME             BLOB         NULL,
    FINGERPRINT       BLOB         NULL,
    LOCATION_CODE     VARCHAR2(4)  NOT NULL
        CONSTRAINT FK_SOCIAL_USER_LOCATION REFERENCES SOCIAL_UD.LOCATION
);

CREATE TABLE SOCIAL_UD.USER_FRIENDSHIP
(
    USER_A VARCHAR2(5) NOT NULL,
    USER_B VARCHAR2(5) NOT NULL,
    PRIMARY KEY (USER_A, USER_B),
    CONSTRAINT FK_USER_FRIENDSHIP_A FOREIGN KEY (USER_A) REFERENCES SOCIAL_UD.SOCIAL_USER (USER_ID),
    CONSTRAINT FK_USER_FRIENDSHIP_B FOREIGN KEY (USER_B) REFERENCES SOCIAL_UD.SOCIAL_USER (USER_ID)
);

CREATE TABLE SOCIAL_UD.USER_FOLLOWING
(
    FOLLOWER_USER_ID VARCHAR2(5) NOT NULL,
    FOLLOWED_USER_ID VARCHAR2(5) NOT NULL,
    PRIMARY KEY (FOLLOWER_USER_ID, FOLLOWED_USER_ID),
    CONSTRAINT FK_USER_FOLLOWING_FOLLOWER FOREIGN KEY (FOLLOWER_USER_ID) REFERENCES SOCIAL_UD.SOCIAL_USER (USER_ID),
    CONSTRAINT FK_USER_FOLLOWING_FOLLOWING FOREIGN KEY (FOLLOWED_USER_ID) REFERENCES SOCIAL_UD.SOCIAL_USER (USER_ID)
);

CREATE TABLE SOCIAL_UD.PROPERTY
(
    PROPERTY_ID          VARCHAR2(8)   NOT NULL PRIMARY KEY,
    PARENT_PROPERTY_ID   VARCHAR2(8)   NULL
        CONSTRAINT FK_PROPERTY_PARENT REFERENCES SOCIAL_UD.PROPERTY (PROPERTY_ID),
    PROPERTY_DESCRIPTION VARCHAR2(100) NULL,
    PROPERTY_VALUE       VARCHAR2(30)  NULL,
    DEFAULT_VALUE        CHAR(1)      NULL
        CONSTRAINT CHK_PROPERTY_DEFAULT_VALUE CHECK (DEFAULT_VALUE IN ('1', '0'))
);

CREATE TABLE SOCIAL_UD.SOCIAL_GROUP
(
    GROUP_ID          NUMBER NOT NULL PRIMARY KEY,
    GROUP_MODIFIER    NUMBER NULL
        CONSTRAINT FK_GROUP_MODIFIER REFERENCES SOCIAL_UD.SOCIAL_GROUP (GROUP_ID),
    CREATOR_USER_ID   VARCHAR2(5)  NOT NULL
        CONSTRAINT FK_GROUP_CREATOR REFERENCES SOCIAL_UD.SOCIAL_USER (USER_ID),
    GROUP_NAME        VARCHAR2(30) NOT NULL,
    REGISTRATION_DATE TIMESTAMP   NOT NULL,
    GROUP_IMAGE       BLOB         NOT NULL
);

CREATE TABLE SOCIAL_UD.GROUP_MEMBERSHIP
(
    GROUP_ID NUMBER NOT NULL,
    USER_ID  VARCHAR2(5)  NOT NULL,
    PRIMARY KEY (GROUP_ID, USER_ID),
    CONSTRAINT FK_GROUP_MEMBER_GROUP FOREIGN KEY (GROUP_ID) REFERENCES SOCIAL_UD.SOCIAL_GROUP (GROUP_ID),
    CONSTRAINT FK_GROUP_MEMBER_USER FOREIGN KEY (USER_ID) REFERENCES SOCIAL_UD.SOCIAL_USER (USER_ID)
);

CREATE TABLE SOCIAL_UD.USER_CONFIGURATION
(
    USER_ID              VARCHAR2(5)  NOT NULL,
    CONFIGURATION_NUMBER NUMBER NOT NULL,
    PROPERTY_ID          VARCHAR2(8)  NOT NULL
        CONSTRAINT FK_USER_CONFIGURATION_PROPERTY REFERENCES SOCIAL_UD.PROPERTY (PROPERTY_ID),
    STATUS               CHAR(1)     NULL
        CONSTRAINT CHK_USER_CONFIGURATION_STATUS CHECK (STATUS IN ('1', '0')),
    VALUE                NUMBER NOT NULL,
    PRIMARY KEY (USER_ID, CONFIGURATION_NUMBER),
    CONSTRAINT FK_USER_CONFIGURATION_USER FOREIGN KEY (USER_ID) REFERENCES SOCIAL_UD.SOCIAL_USER (USER_ID)
);

CREATE TABLE SOCIAL_UD.GROUP_CONFIGURATION
(
    GROUP_ID             NUMBER NOT NULL,
    CONFIGURATION_NUMBER NUMBER NOT NULL,
    PROPERTY_ID          VARCHAR2(8)  NOT NULL
        CONSTRAINT FK_GROUP_CONFIGURATION_PROPERTY REFERENCES SOCIAL_UD.PROPERTY (PROPERTY_ID),
    STATUS               CHAR(1)     NOT NULL
        CONSTRAINT CHK_GROUP_CONFIGURATION_STATUS CHECK (STATUS IN ('1', '0')),
    VALUE                NUMBER NOT NULL,
    PRIMARY KEY (GROUP_ID, CONFIGURATION_NUMBER),
    CONSTRAINT FK_GROUP_CONFIGURATION_GROUP FOREIGN KEY (GROUP_ID) REFERENCES SOCIAL_UD.SOCIAL_GROUP (GROUP_ID)
);

CREATE TABLE SOCIAL_UD.MESSAGE
(
    MESSAGE_ID        NUMBER NOT NULL PRIMARY KEY,
    PARENT_MESSAGE_ID NUMBER NULL
        CONSTRAINT FK_MESSAGE_PARENT REFERENCES SOCIAL_UD.MESSAGE (MESSAGE_ID),
    GROUP_ID          NUMBER NULL
        CONSTRAINT FK_MESSAGE_GROUP REFERENCES SOCIAL_UD.SOCIAL_GROUP (GROUP_ID),
    SENDER_USER_ID    VARCHAR2(5)  NOT NULL
        CONSTRAINT FK_MESSAGE_SENDER REFERENCES SOCIAL_UD.SOCIAL_USER (USER_ID),
    RECEIVER_USER_ID  VARCHAR2(5)  NOT NULL
        CONSTRAINT FK_MESSAGE_RECEIVER REFERENCES SOCIAL_UD.SOCIAL_USER (USER_ID),
    MESSAGE_DATE      TIMESTAMP   NOT NULL
);

CREATE TABLE SOCIAL_UD.CONTENT_TYPE
(
    CONTENT_TYPE_ID  VARCHAR2(2)  NOT NULL PRIMARY KEY,
    TYPE_DESCRIPTION VARCHAR2(30) NOT NULL
);

CREATE TABLE SOCIAL_UD.FILE_TYPE
(
    FILE_TYPE_ID          VARCHAR2(3)  NOT NULL PRIMARY KEY,
    FILE_TYPE_DESCRIPTION VARCHAR2(30) NOT NULL
);

CREATE TABLE SOCIAL_UD.CONTENT
(
    MESSAGE_ID          NUMBER       NOT NULL,
    CONTENT_ID          NUMBER       NOT NULL,
    CONTENT_IMAGE       BLOB         NOT NULL,
    CONTENT_DESCRIPTION VARCHAR2(255) NULL,
    CONTENT_TYPE_ID     VARCHAR2(2)   NOT NULL,
    FILE_TYPE           VARCHAR2(3)   NULL,
    PRIMARY KEY (MESSAGE_ID, CONTENT_ID),
    CONSTRAINT FK_CONTENT_MESSAGE_ID FOREIGN KEY (MESSAGE_ID) REFERENCES SOCIAL_UD.MESSAGE (MESSAGE_ID),
    CONSTRAINT FK_CONTENT_TYPE FOREIGN KEY (CONTENT_TYPE_ID) REFERENCES SOCIAL_UD.CONTENT_TYPE (CONTENT_TYPE_ID),
    CONSTRAINT FK_CONTENT_FILE_TYPE FOREIGN KEY (FILE_TYPE) REFERENCES SOCIAL_UD.FILE_TYPE (FILE_TYPE_ID)
);

-- Create sequences
CREATE SEQUENCE SOCIAL_UD.USER_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE SEQUENCE SOCIAL_UD.GROUP_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE SEQUENCE SOCIAL_UD.MESSAGE_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

-- Insert initial data
INSERT INTO SOCIAL_UD.LOCATION_TYPE(LOCATION_TYPE_CODE, LOCATION_TYPE_DESCRIPTION)
VALUES ('1', 'PAIS');

INSERT INTO SOCIAL_UD.LOCATION_TYPE (LOCATION_TYPE_CODE, LOCATION_TYPE_DESCRIPTION)
VALUES ('2', 'DEPARTAMENTO');

INSERT INTO SOCIAL_UD.LOCATION_TYPE (LOCATION_TYPE_CODE, LOCATION_TYPE_DESCRIPTION)
VALUES ('3', 'CIUDAD');

INSERT INTO SOCIAL_UD.LOCATION (LOCATION_CODE, LOCATION_TYPE_CODE, LOCATION_NAME)
VALUES ('0001', '1', 'Colombia');

INSERT INTO SOCIAL_UD.LOCATION (LOCATION_CODE, LOCATION_TYPE_CODE, LOCATION_NAME, PARENT_LOCATION)
VALUES ('0002', '2', 'Antioquia', '0001');

INSERT INTO SOCIAL_UD.LOCATION (LOCATION_CODE, LOCATION_TYPE_CODE, LOCATION_NAME, PARENT_LOCATION)
VALUES ('0003', '3', 'Medellin', '0002');

-- Insert content types
INSERT INTO SOCIAL_UD.CONTENT_TYPE (CONTENT_TYPE_ID, TYPE_DESCRIPTION)
VALUES ('01', 'TEXTO');

INSERT INTO SOCIAL_UD.CONTENT_TYPE (CONTENT_TYPE_ID, TYPE_DESCRIPTION)
VALUES ('02', 'IMAGEN');

INSERT INTO SOCIAL_UD.CONTENT_TYPE (CONTENT_TYPE_ID, TYPE_DESCRIPTION)
VALUES ('03', 'VIDEO');

INSERT INTO SOCIAL_UD.CONTENT_TYPE (CONTENT_TYPE_ID, TYPE_DESCRIPTION)
VALUES ('04', 'AUDIO');

INSERT INTO SOCIAL_UD.CONTENT_TYPE (CONTENT_TYPE_ID, TYPE_DESCRIPTION)
VALUES ('05', 'DOCUMENTO');

-- Insert file types
INSERT INTO SOCIAL_UD.FILE_TYPE (FILE_TYPE_ID, FILE_TYPE_DESCRIPTION)
VALUES ('001', 'PNG');

INSERT INTO SOCIAL_UD.FILE_TYPE (FILE_TYPE_ID, FILE_TYPE_DESCRIPTION)
VALUES ('002', 'JPG');

INSERT INTO SOCIAL_UD.FILE_TYPE (FILE_TYPE_ID, FILE_TYPE_DESCRIPTION)
VALUES ('003', 'PDF');

INSERT INTO SOCIAL_UD.FILE_TYPE (FILE_TYPE_ID, FILE_TYPE_DESCRIPTION)
VALUES ('004', 'MP4');

INSERT INTO SOCIAL_UD.FILE_TYPE (FILE_TYPE_ID, FILE_TYPE_DESCRIPTION)
VALUES ('005', 'MP3');

COMMIT; 